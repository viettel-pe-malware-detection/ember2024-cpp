#include "efe/core/f_header_file_info/machine_type_encoding.h"

void f_header_file_info::encodeMachineType(machine_type_t machineType, feature_t* output) {
    output[0] = 0.0;

    switch (machineType) {
        #define ADD(ordinal, name) case MachineType::name: output[0] = ordinal; break;

        ADD(0, IMAGE_FILE_MACHINE_UNKNOWN)
        ADD(1, IMAGE_FILE_MACHINE_I386)
        ADD(2, IMAGE_FILE_MACHINE_R3000)
        ADD(3, IMAGE_FILE_MACHINE_R4000)
        ADD(4, IMAGE_FILE_MACHINE_R10000)
        ADD(5, IMAGE_FILE_MACHINE_WCEMIPSV2)
        ADD(6, IMAGE_FILE_MACHINE_ALPHA)
        ADD(7, IMAGE_FILE_MACHINE_SH3)
        ADD(8, IMAGE_FILE_MACHINE_SH3DSP)
        ADD(9, IMAGE_FILE_MACHINE_SH3E)
        ADD(10, IMAGE_FILE_MACHINE_SH4)
        ADD(11, IMAGE_FILE_MACHINE_SH5)
        ADD(12, IMAGE_FILE_MACHINE_ARM)
        ADD(13, IMAGE_FILE_MACHINE_THUMB)
        ADD(14, IMAGE_FILE_MACHINE_ARMNT)
        ADD(15, IMAGE_FILE_MACHINE_AM33)
        ADD(16, IMAGE_FILE_MACHINE_POWERPC)
        ADD(17, IMAGE_FILE_MACHINE_POWERPCFP)
        ADD(18, IMAGE_FILE_MACHINE_IA64)
        ADD(19, IMAGE_FILE_MACHINE_MIPS16)
        ADD(20, IMAGE_FILE_MACHINE_ALPHA64)
        // ADD(21, IMAGE_FILE_MACHINE_AXP64) // since IMAGE_FILE_MACHINE_AXP64 is equal to IMAGE_FILE_MACHINE_ALPHA64
        ADD(22, IMAGE_FILE_MACHINE_MIPSFPU)
        ADD(23, IMAGE_FILE_MACHINE_MIPSFPU16)
        ADD(24, IMAGE_FILE_MACHINE_TRICORE)
        ADD(25, IMAGE_FILE_MACHINE_CEF)
        ADD(26, IMAGE_FILE_MACHINE_EBC)
        ADD(27, IMAGE_FILE_MACHINE_RISCV32)
        ADD(28, IMAGE_FILE_MACHINE_RISCV64)
        ADD(29, IMAGE_FILE_MACHINE_RISCV128)
        ADD(30, IMAGE_FILE_MACHINE_LOONGARCH32)
        ADD(31, IMAGE_FILE_MACHINE_LOONGARCH64)
        ADD(32, IMAGE_FILE_MACHINE_AMD64)
        ADD(33, IMAGE_FILE_MACHINE_M32R)
        ADD(34, IMAGE_FILE_MACHINE_ARM64)
        ADD(35, IMAGE_FILE_MACHINE_CEE)
        static_assert(1 == MACHINE_TYPE_ENCODING_DIM);

        #undef ADD
    }
}
